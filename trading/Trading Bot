import os
from binance.client import Client
from binance.enums import *

class BinanceEngine:
    def __init__(self):
        self.api_key = os.getenv("BINANCE_API_KEY")
        self.api_secret = os.getenv("BINANCE_API_SECRET")
        self.client = Client(self.api_key, self.api_secret)

    def get_balance(self, asset='USDT'):
        balance = self.client.get_asset_balance(asset=asset)
        return balance

    def get_price(self, symbol='BTCUSDT'):
        ticker = self.client.get_symbol_ticker(symbol=symbol)
        return ticker

    def place_market_buy(self, symbol='BTCUSDT', quantity=0.001):
        order = self.client.order_market_buy(
            symbol=symbol,
            quantity=quantity
        )
        return order

    def place_market_sell(self, symbol='BTCUSDT', quantity=0.001):
        order = self.client.order_market_sell(
            symbol=symbol,
            quantity=quantity
        )
        return order

    def get_open_orders(self, symbol='BTCUSDT'):
        orders = self.client.get_open_orders(symbol=symbol)
        return orders

    def cancel_all_orders(self, symbol='BTCUSDT'):
        orders = self.get_open_orders(symbol)
        for order in orders:
            self.client.cancel_order(symbol=symbol, orderId=order['orderId'])
        return f"Alle offenen Orders fÃ¼r {symbol} wurden storniert."

    def get_portfolio(self):
        account = self.client.get_account()
        assets = [
            balance for balance in account['balances']
            if float(balance['free']) > 0 or float(balance['locked']) > 0
        ]
        return assets
